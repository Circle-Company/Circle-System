name: Push-to-EC2
on:
    push:
        branches:
            - main

jobs:
    build:
        name: Build Docker Image
        runs-on: ubuntu-latest
        environment: ENV_FILE
        steps:
            - name: Checkout Source
              uses: actions/checkout@v3

            - name: Login to Docker Hub
              run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            - name: Build Docker Image with Secrets
              run: buildx build --tag tiagosavioli/circle-system:latest --build-arg PORT=${{ vars.PORT }} \ --build-arg NODE_ENV=${{ vars.NODE_ENV }} \ --build-arg API_VERSION=${{ vars.API_VERSION }} \ --build-arg RUN_SCRIPTS_MODE=${{ vars.RUN_SCRIPTS_MODE }} \ --build-arg CIRCLE_SWIPE_ENGINE_API=${{ vars.CIRCLE_SWIPE_ENGINE_API }} \ --build-arg DEVELOPMENT_DB_HOST=${{ secrets.PRODUCTION_DB_HOST }} \ --build-arg DEVELOPMENT_DB_USERNAME=${{ secrets.PRODUCTION_DB_USERNAME }} \ --build-arg DEVELOPMENT_DB_PASSWORD=${{ secrets.PRODUCTION_DB_PASSWORD }} \ --build-arg DEVELOPMENT_DB_NAME=${{ secrets.PRODUCTION_DB_NAME }} \ --build-arg TEST_DB_HOST=${{ secrets.PRODUCTION_DB_HOST }} \ --build-arg TEST_DB_USERNAME=${{ secrets.PRODUCTION_DB_USERNAME }} \ --build-arg TEST_DB_PASSWORD=${{ secrets.PRODUCTION_DB_PASSWORD }} \ --build-arg TEST_DB_NAME=${{ secrets.PRODUCTION_DB_NAME }} \ --build-arg PRODUCTION_DB_HOST=${{ secrets.PRODUCTION_DB_HOST }} \ --build-arg PRODUCTION_DB_USERNAME=${{ secrets.PRODUCTION_DB_USERNAME }} \ --build-arg PRODUCTION_DB_PASSWORD=${{ secrets.PRODUCTION_DB_PASSWORD }} \ --build-arg PRODUCTION_DB_NAME=${{ secrets.PRODUCTION_DB_NAME }} \ --build-arg PRODUCTION_DB_CLEAN_ALLOW=${{ vars.PRODUCTION_DB_CLEAN_ALLOW }} \ --build-arg JWT_EXPIRES=${{ vars.JWT_EXPIRES }} \ --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \ --build-arg JWT_ISSUER=${{ vars.JWT_ISSUER }} \ --build-arg JWT_AUDIENCE=${{ vars.JWT_AUDIENCE }} \ --build-arg PRIVATE_KEY_PASSPHRASE=${{ secrets.PRIVATE_KEY_PASSPHRASE }} \ --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \ --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \ --build-arg AWS_ENDPOINT=${{ secrets.AWS_ENDPOINT }} \ --build-arg AWS_REGION=${{ vars.AWS_REGION }} \ --build-arg AWS_MIDIA_BUCKET_DEVELOPMENT=${{ secrets.AWS_MIDIA_BUCKET }} \ --build-arg AWS_MIDIA_BUCKET_TEST=${{ secrets.AWS_MIDIA_BUCKET }} \ --build-arg AWS_MIDIA_BUCKET_PRODUCTION=${{ secrets.AWS_MIDIA_BUCKET }} \ --build-arg AWS_PROFILE_MIDIA_BUCKET_DEVELOPMENT=${{ secrets.AWS_PROFILE_MIDIA_BUCKET }} \ --build-arg AWS_PROFILE_MIDIA_BUCKET_TEST=${{ secrets.AWS_PROFILE_MIDIA_BUCKET }} \ --build-arg AWS_PROFILE_MIDIA_BUCKET_PRODUCTION=${{ secrets.AWS_PROFILE_MIDIA_BUCKET }} \ --build-arg EMAIL_DEFAULT_SENDER=${{ secrets.EMAIL_DEFAULT_SENDER }} \ --build-arg PUBLIC_REGISTRATION=${{ secrets.PUBLIC_REGISTRATION }} \ --build-arg INVITE_REGISTRATION=${{ secrets.INVITE_REGISTRATION }} \ --build-arg TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }} \ --build-arg TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }} \ --build-arg TWILIO_MESSAGE_SERVICE_SID=${{ secrets.TWILIO_MESSAGE_SERVICE_SID }} \ --build-arg TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }} \ --build-arg FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \ --build-arg FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }} \ --build-arg FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }} \ --build-arg FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }} \ --build-arg FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }} \ --build-arg FIREBASE_AUTH_URI=${{ vars.FIREBASE_AUTH_URI }} \ --build-arg FIREBASE_TOKEN_URI=${{ vars.FIREBASE_TOKEN_URI }} \ --build-arg FIREBASE_AUTH_PROVIDER_CERT_URL=${{ vars.FIREBASE_AUTH_PROVIDER_CERT_URL }} \ --build-arg FIREBASE_CLIENT_CERT_URL=${{ secrets.FIREBASE_CLIENT_CERT_URL }} \ --build-arg FIREBASE_UNIVERSE_DOMAIN=${{ secrets.FIREBASE_UNIVERSE_DOMAIN }} .

            - name: Publish Image to Docker Hub
              run: docker push tiagosavioli/circle-system:latest

    deploy:
        name: Deploy to EC2
        needs: build
        runs-on: self-hosted
        environment: ENV_FILE
        steps:
            - name: Checkout Code
              uses: actions/checkout@v2

            - name: Save and Configure SSH Key
              run: |
                  echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > circle-system-key.pem
                  chmod 600 circle-system-key.pem

            - name: Add EC2 to Known Hosts
              run: ssh-keyscan -H ${{ vars.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

            - name: Deploy Containers
              run: |
                  ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -i circle-system-key.pem ubuntu@${{ vars.EC2_PUBLIC_IP }} << 'EOF'
                  touch .env
                  echo PORT=${{ vars.PORT }} >> .env
                  echo NODE_ENV=${{ vars.NODE_ENV }} >> .env
                  echo API_VERSION=${{ vars.API_VERSION }} >> .env
                  echo RUN_SCRIPTS_MODE=${{ vars.RUN_SCRIPTS_MODE }} >> .env
                  echo CIRCLE_SWIPE_ENGINE_API=${{ vars.CIRCLE_SWIPE_ENGINE_API }} >> .env
                  echo PRODUCTION_DB_HOST=${{ secrets.PRODUCTION_DB_HOST }} >> .env
                  echo PRODUCTION_DB_USERNAME=${{ secrets.PRODUCTION_DB_USERNAME }} >> .env
                  echo PRODUCTION_DB_PASSWORD=${{ secrets.PRODUCTION_DB_PASSWORD }} >> .env
                  echo PRODUCTION_DB_NAME=${{ secrets.PRODUCTION_DB_NAME }} >> .env
                  echo PRODUCTION_DB_CLEAN_ALLOW=${{ vars.PRODUCTION_DB_CLEAN_ALLOW }} >> .env
                  echo JWT_EXPIRES=${{ vars.JWT_EXPIRES }} >> .env
                  echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
                  echo JWT_ISSUER=${{ vars.JWT_ISSUER }} >> .env
                  echo JWT_AUDIENCE=${{ vars.JWT_AUDIENCE }} >> .env
                  echo PRIVATE_KEY_PASSPHRASE=${{ secrets.PRIVATE_KEY_PASSPHRASE}} >> .env
                  echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
                  echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
                  echo AWS_ENDPOINT=${{ secrets.AWS_ENDPOINT }} >> .env
                  echo AWS_REGION=${{ vars.AWS_REGION }} >> .env
                  echo AWS_MIDIA_BUCKET_DEVELOPMENT=${{ secrets.AWS_MIDIA_BUCKET }} >> .env
                  echo AWS_MIDIA_BUCKET_TEST=${{ secrets.AWS_MIDIA_BUCKET }} >> .env
                  echo AWS_MIDIA_BUCKET_PRODUCTION=${{ secrets.AWS_MIDIA_BUCKET }} >> .env
                  echo AWS_PROFILE_MIDIA_BUCKET_DEVELOPMENT=${{ secrets.AWS_PROFILE_MIDIA_BUCKET }} >> .env
                  echo AWS_PROFILE_MIDIA_BUCKET_TEST=${{ secrets.AWS_PROFILE_MIDIA_BUCKET }} >> .env
                  echo AWS_PROFILE_MIDIA_BUCKET_PRODUCTION=${{ secrets.AWS_PROFILE_MIDIA_BUCKET }} >> .env
                  echo EMAIL_DEFAULT_SENDER="" >> .env
                  echo PUBLIC_REGISTRATION="" >> .env
                  echo INVITE_REGISTRATION="" >> .env
                  echo TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }} >> .env
                  echo TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }} >> .env
                  echo TWILIO_MESSAGE_SERVICE_SID=${{ secrets.TWILIO_MESSAGE_SERVICE_SID }} >> .env
                  echo TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }} >> .env
                  echo FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} >> .env
                  echo FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }} >> .env
                  echo FIREBASE_AUTH_URI=${{ vars.FIREBASE_AUTH_URI }} >> .env
                  echo FIREBASE_TOKEN_URI=${{ vars.FIREBASE_TOKEN_URI }} >> .env
                  echo FIREBASE_AUTH_PROVIDER_CERT_URL=${{ vars.FIREBASE_AUTH_PROVIDER_CERT_URL }} >> .env
                  echo FIREBASE_UNIVERSE_DOMAIN=${{ vars.FIREBASE_UNIVERSE_DOMAIN }} >> .env
                  echo FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }} >> .env
                  echo FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }} >> .env
                  echo FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }} >> .env
                  echo FIREBASE_CLIENT_CERT_URL=${{ secrets.FIREBASE_CLIENT_CERT_URL }} >> .env
                  cat .env
                  echo "✅ Arquivo .env Criado com Sucesso."

                  echo "Iniciando Deploy no EC2."

                  # Atualiza pacotes e reinicia o Docker
                  sudo apt-get update -y
                  sudo systemctl restart docker

                  # Parar containers antigos, se existirem
                  docker stop circle-system-01 nginx || true
                  docker rm -f circle-system-01 nginx || true

                  # Criar rede Docker, se não existir
                  if ! docker network inspect circle_network >/dev/null 2>&1; then
                      docker network create circle_network
                  fi

                  # Login no Docker Hub
                  echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

                  # Baixar a nova imagem
                  docker pull tiagosavioli/circle-system:latest

                  # Rodar backend com variáveis de ambiente corretamente
                  docker run -d --name circle-system-01 \
                    --restart unless-stopped \
                    --network circle_network \
                    --env-file /home/ubuntu/.env \
                    -p 3000:3000 \
                    tiagosavioli/circle-system:latest

                  # Criando configuração do Nginx
                  cat <<EOT > nginx.conf
                  worker_processes auto;

                  events {
                      worker_connections 1024;
                  }

                  http {
                      upstream backend {
                          server circle-system-01:3000;
                      }

                      server {
                          listen 80;

                          location / {
                              proxy_pass http://circle-system-01:3000;
                              proxy_http_version 1.1;
                              proxy_set_header Upgrade \$http_upgrade;
                              proxy_set_header Connection 'upgrade';
                              proxy_set_header Host \$host;
                              proxy_cache_bypass \$http_upgrade;
                          }
                      }
                  }
                  EOT

                  # Iniciar Nginx corretamente
                  docker run -d --name nginx \
                    --env-file /home/ubuntu/app/.env \
                    --restart unless-stopped \
                    --network circle_network \
                    -p 80:80 \
                    -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf:ro \
                    nginx:latest

                  echo "✅ Deploy concluído com sucesso!"
