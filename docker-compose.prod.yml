version: "3.8"

networks:
    app-network:
        driver: bridge

services:
    backend:
        container_name: circle-system-01
        build:
            context: .
            dockerfile: Dockerfile
            target: production
        expose:
            - "3000"
        env_file:
            - .env
        environment:
            - PORT=3000
            - RUN_SCRIPTS_MODE=false
            - NODE_ENV=production
            - CIRCLE_SWIPE_ENGINE_API=http://localhost:5000/
            - PRODUCTION_DB_HOST=${PRODUCTION_DB_HOST}
            - PRODUCTION_DB_USERNAME=${PRODUCTION_DB_USERNAME}
            - PRODUCTION_DB_PASSWORD=${PRODUCTION_DB_PASSWORD}
            - PRODUCTION_DB_NAME=${PRODUCTION_DB_NAME}
            - PRODUCTION_DB_CLEAN_ALLOW=${PRODUCTION_DB_CLEAN_ALLOW}
            - JWT_EXPIRES=${JWT_EXPIRES}
            - JWT_SECRET=${JWT_SECRET}
            - JWT_ISSUER=${JWT_ISSUER}
            - JWT_AUDIENCE=${JWT_AUDIENCE}
            - PRIVATE_KEY_PASSPHRASE=${PRIVATE_KEY_PASSPHRASE}
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - AWS_ENDPOINT=${AWS_ENDPOINT}
            - AWS_REGION=${AWS_REGION}
            - AWS_MIDIA_BUCKET_DEVELOPMENT=${AWS_MIDIA_BUCKET_DEVELOPMENT}
            - AWS_MIDIA_BUCKET_TEST=${AWS_MIDIA_BUCKET_TEST}
            - AWS_MIDIA_BUCKET_PRODUCTION=${AWS_MIDIA_BUCKET_PRODUCTION}
            - AWS_PROFILE_MIDIA_BUCKET_DEVELOPMENT=${AWS_PROFILE_MIDIA_BUCKET_DEVELOPMENT}
            - AWS_PROFILE_MIDIA_BUCKET_TEST=${AWS_PROFILE_MIDIA_BUCKET_TEST}
            - AWS_PROFILE_MIDIA_BUCKET_PRODUCTION=${AWS_PROFILE_MIDIA_BUCKET_PRODUCTION}
            - EMAIL_DEFAULT_SENDER=${EMAIL_DEFAULT_SENDER}
            - PUBLIC_REGISTRATION=${PUBLIC_REGISTRATION}
            - INVITE_REGISTRATION=${INVITE_REGISTRATION}
            - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
            - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
            - TWILIO_MESSAGE_SERVICE_SID=${TWILIO_MESSAGE_SERVICE_SID}
            - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
        networks:
            - app-network
        deploy:
            resources:
                limits:
                    cpus: "0.5" # Limita o container a usar no m√°ximo 50% de uma CPU
                    memory: "0.5GB" # Limita o uso de mem√≥ria do container para 512 MB
        volumes:
            - ./.env:/app/.env # Monta o .env corretamente dentro do container
            - ./firebase-settings.json:/app/firebase-settings.json # Copia o arquivo do host para o container
        healthcheck: # ü©∫ Garante que o container est√° pronto antes de o Nginx tentar acess√°-lo
            test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
            interval: 10s
            retries: 3
            start_period: 5s
            timeout: 5s
        command: ["sh", "-c", "export $(grep -v '^#' /app/.env | xargs) && npm start"]
    nginx:
        image: nginx:latest
        container_name: nginx-proxy
        depends_on:
            backend:
                condition: service_healthy # ‚úÖ Agora o Nginx s√≥ sobe quando o backend estiver pronto
        ports:
            - "80:80" # Porta p√∫blica HTTP
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro # Configura√ß√£o do Nginx
    networks:
        app-network:
            driver: bridge
